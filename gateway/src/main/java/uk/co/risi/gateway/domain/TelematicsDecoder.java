/*
  This class file was automatically generated by jASN1 v1.11.2 (http://www.beanit.com)
 */

package uk.co.risi.gateway.domain;

import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.Serializable;

import com.beanit.jasn1.ber.*;
import com.beanit.jasn1.ber.types.*;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

@Setter
@Getter
@NoArgsConstructor
public class TelematicsDecoder implements BerType, Serializable {

    private static final long serialVersionUID = 1L;

    private static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);

    private byte[] code;
    private BerInteger speed;
    private BerInteger rpm;
    private BerInteger gear;

    public int encode(OutputStream reverseOS) throws IOException {

        if (code != null) {
            for (int i = code.length - 1; i >= 0; i--)
                reverseOS.write(code[i]);

            return tag.encode(reverseOS) + code.length;
        }

        int codeLength = 0;
        codeLength += gear.encode(reverseOS, false);
        // write tag: CONTEXT_CLASS, PRIMITIVE, 2
        reverseOS.write(0x82);
        codeLength += 1;

        codeLength += rpm.encode(reverseOS, false);
        // write tag: CONTEXT_CLASS, PRIMITIVE, 1
        reverseOS.write(0x81);
        codeLength += 1;

        codeLength += speed.encode(reverseOS, false);
        // write tag: CONTEXT_CLASS, PRIMITIVE, 0
        reverseOS.write(0x80);
        codeLength += 1;

        codeLength += BerLength.encodeLength(reverseOS, codeLength);
        codeLength += tag.encode(reverseOS);

        return codeLength;
    }

    public int decode(InputStream is) throws IOException {
        int codeLength = 0;
        int subCodeLength = 0;
        BerTag berTag = new BerTag();

        //if (withTag)
        codeLength += tag.decodeAndCheck(is);

        BerLength length = new BerLength();
        codeLength += length.decode(is);

        int totalLength = length.val;
        codeLength += totalLength;

        subCodeLength += berTag.decode(is);
        if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 0)) {
            speed = new BerInteger();
            subCodeLength += speed.decode(is, false);
            subCodeLength += berTag.decode(is);
        } else
            throw new IOException("Tag does not match the mandatory sequence element tag.");

        if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 1)) {
            rpm = new BerInteger();
            subCodeLength += rpm.decode(is, false);
            subCodeLength += berTag.decode(is);
        } else
            throw new IOException("Tag does not match the mandatory sequence element tag.");

        if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 2)) {
            gear = new BerInteger();
            subCodeLength += gear.decode(is, false);
            if (subCodeLength == totalLength) {
                return codeLength;
            }
        }

        throw new IOException("Unexpected end of sequence, length tag: "
                + totalLength
                + ", actual sequence length: "
                + subCodeLength);
    }

    public String toString() {
        StringBuilder sb = new StringBuilder();
        appendAsString(sb);
        return sb.toString();
    }

    private void appendAsString(StringBuilder sb) {

        sb.append("{");
        sb.append("\n");
        sb.append("\t".repeat(Math.max(0, 1)));

        if (speed != null)
            sb.append("speed: ").append(speed);
        else
            sb.append("speed: <empty-required-field>");

        sb.append(",\n");
        sb.append("\t".repeat(Math.max(0, 1)));
        if (rpm != null)
            sb.append("rpm: ").append(rpm);
        else
            sb.append("rpm: <empty-required-field>");


        sb.append(",\n");
        sb.append("\t".repeat(Math.max(0, 1)));

        if (gear != null)
            sb.append("gear: ").append(gear);
        else
            sb.append("gear: <empty-required-field>");

        sb.append("\n");
        sb.append("\t".repeat(0));

        sb.append("}");
    }

}

